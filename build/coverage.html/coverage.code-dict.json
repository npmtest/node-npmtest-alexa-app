{"/home/travis/build/npmtest/node-npmtest-alexa-app/test.js":"/* istanbul instrument in package npmtest_alexa_app */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alexa-app/lib.npmtest_alexa_app.js":"/* istanbul instrument in package npmtest_alexa_app */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_alexa_app = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_alexa_app = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-alexa-app/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-alexa-app && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_alexa_app */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_alexa_app\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_alexa_app.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_alexa_app.rollup.js'] =\n            local.assetsDict['/assets.npmtest_alexa_app.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_alexa_app.__dirname + '/lib.npmtest_alexa_app.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-alexa-app/node_modules/alexa-app/index.js":"\"use strict\";\n\nvar Promise = require(\"bluebird\");\nvar AlexaUtterances = require(\"alexa-utterances\");\nvar SSML = require(\"./lib/to-ssml\");\nvar alexa = {};\nvar defaults = require(\"lodash.defaults\");\nvar verifier = require(\"alexa-verifier-middleware\");\nvar bodyParser = require('body-parser');\nvar normalizeApiPath = require('./lib/normalize-api-path');\n\nalexa.response = function(session) {\n  var self = this;\n  this.resolved = false;\n  this.response = {\n    \"version\": \"1.0\",\n    \"response\": {\n      \"directives\": [],\n      \"shouldEndSession\": true\n    }\n  };\n  this.say = function(str) {\n    if (typeof this.response.response.outputSpeech == \"undefined\") {\n      this.response.response.outputSpeech = {\n        \"type\": \"SSML\",\n        \"ssml\": SSML.fromStr(str)\n      };\n    } else {\n      // append str to the current outputSpeech, stripping the out speak tag\n      this.response.response.outputSpeech.ssml = SSML.fromStr(str, this.response.response.outputSpeech.ssml);\n    }\n    return this;\n  };\n  this.clear = function( /*str*/ ) {\n    this.response.response.outputSpeech = {\n      \"type\": \"SSML\",\n      \"ssml\": SSML.fromStr(\"\")\n    };\n    return this;\n  };\n  this.reprompt = function(str) {\n    if (typeof this.response.response.reprompt == \"undefined\") {\n      this.response.response.reprompt = {\n        \"outputSpeech\": {\n          \"type\": \"SSML\",\n          \"ssml\": SSML.fromStr(str)\n        }\n      };\n    } else {\n      // append str to the current outputSpeech, stripping the out speak tag\n      this.response.response.reprompt.outputSpeech.ssml = SSML.fromStr(str, this.response.response.reprompt.outputSpeech.text);\n    }\n    return this;\n  };\n  this.card = function(oCard) {\n    if (2 == arguments.length) { // backwards compat\n      oCard = {\n        type: \"Simple\",\n        title: arguments[0],\n        content: arguments[1]\n      };\n    }\n\n    var requiredAttrs = [],\n      clenseAttrs = [];\n\n    switch (oCard.type) {\n      case 'Simple':\n        requiredAttrs.push('content');\n        clenseAttrs.push('content');\n        break;\n      case 'Standard':\n        requiredAttrs.push('text');\n        clenseAttrs.push('text');\n        if (('image' in oCard) && (!('smallImageUrl' in oCard['image']) && !('largeImageUrl' in oCard['image']))) {\n          console.error('If card.image is defined, must specify at least smallImageUrl or largeImageUrl');\n          return this;\n        }\n        break;\n      default:\n        break;\n    }\n\n    var hasAllReq = requiredAttrs.every(function(idx) {\n      if (!(idx in oCard)) {\n        console.error('Card object is missing required attr \"' + idx + '\"');\n        return false;\n      }\n      return true;\n    });\n\n    if (!hasAllReq) {\n      return this;\n    }\n\n    // remove all SSML to keep the card clean\n    clenseAttrs.forEach(function(idx) {\n      oCard[idx] = SSML.cleanse(oCard[idx]);\n    });\n\n    this.response.response.card = oCard;\n\n    return this;\n  };\n  this.linkAccount = function() {\n    this.response.response.card = {\n      \"type\": \"LinkAccount\"\n    };\n    return this;\n  };\n  this.shouldEndSession = function(bool, reprompt) {\n    this.response.response.shouldEndSession = bool;\n    if (reprompt) {\n      this.reprompt(reprompt);\n    }\n    return this;\n  };\n  this.sessionObject = session;\n  this.setSessionAttributes = function(attributes) {\n    this.response.sessionAttributes = attributes;\n  };\n  // prepare response object\n  this.prepare = function() {\n    this.setSessionAttributes(this.sessionObject.getAttributes());\n  };\n  this.audioPlayerPlay = function(playBehavior, audioItem) {\n    var audioPlayerDirective = {\n      \"type\": \"AudioPlayer.Play\",\n      \"playBehavior\": playBehavior,\n      \"audioItem\": audioItem\n    };\n    self.response.response.directives.push(audioPlayerDirective);\n    return this;\n  };\n  this.audioPlayerPlayStream = function(playBehavior, stream) {\n    var audioItem = {\n      \"stream\": stream\n    };\n    return this.audioPlayerPlay(playBehavior, audioItem);\n  };\n  this.audioPlayerStop = function() {\n    var audioPlayerDirective = {\n      \"type\": \"AudioPlayer.Stop\"\n    };\n    self.response.response.directives.push(audioPlayerDirective);\n    return this;\n  };\n  this.audioPlayerClearQueue = function(clearBehavior) {\n    var audioPlayerDirective = {\n      \"type\": \"AudioPlayer.ClearQueue\",\n      \"clearBehavior\": clearBehavior || \"CLEAR_ALL\"\n    };\n    self.response.response.directives.push(audioPlayerDirective);\n    return this;\n  };\n\n  // legacy code below\n  // @deprecated\n  this.session = function(key, val) {\n    if (typeof val == \"undefined\") {\n      return this.sessionObject.get(key);\n    } else {\n      this.sessionObject.set(key, val);\n    }\n    return this;\n  };\n\n  // @deprecated\n  this.clearSession = function(key) {\n    this.sessionObject.clear(key);\n    return this;\n  };\n};\n\nalexa.request = function(json) {\n  this.data = json;\n  this.slot = function(slotName, defaultValue) {\n    try {\n      if (this.data.request.intent.slots && slotName in this.data.request.intent.slots) {\n        return this.data.request.intent.slots[slotName].value;\n      } else {\n        return defaultValue;\n      }\n    } catch (e) {\n      console.error(\"missing intent in request: \" + slotName, e);\n      return defaultValue;\n    }\n  };\n  this.type = function() {\n    if (!(this.data && this.data.request && this.data.request.type)) {\n      console.error(\"missing request type:\", this.data);\n      return;\n    }\n    return this.data.request.type;\n  };\n  this.isAudioPlayer = function() {\n    var requestType = this.type();\n    return (requestType && 0 === requestType.indexOf(\"AudioPlayer.\"));\n  };\n  this.isPlaybackController = function() {\n    var requestType = this.type();\n    return (requestType && 0 === requestType.indexOf(\"PlaybackController.\"));\n  };\n\n  this.userId = null;\n  this.applicationId = null;\n  this.context = null;\n\n  if (this.data.context) {\n    this.userId = this.data.context.System.user.userId;\n    this.applicationId = this.data.context.System.application.applicationId;\n    this.context = this.data.context;\n  }\n\n  var session = new alexa.session(json.session);\n  this.hasSession = function() {\n    return session.isAvailable();\n  };\n  this.getSession = function() {\n    return session;\n  };\n\n  // legacy code below\n  // @deprecated\n  this.sessionDetails = this.getSession().details;\n  // @deprecated\n  this.sessionId = this.getSession().sessionId;\n  // @deprecated\n  this.sessionAttributes = this.getSession().attributes;\n  // @deprecated\n  this.isSessionNew = this.hasSession() ? this.getSession().isNew() : false;\n  // @deprecated\n  this.session = function(key) {\n    return this.getSession().get(key);\n  };\n};\n\nalexa.session = function(session) {\n  var isAvailable = (typeof session != \"undefined\");\n  this.isAvailable = function() {\n    return isAvailable;\n  };\n  if (isAvailable) {\n    this.isNew = function() {\n      return (true === session.new);\n    };\n    this.get = function(key) {\n      // getAttributes deep clones the attributes object, so updates to objects\n      // will not affect the session until `set` is called explicitly\n      return this.getAttributes()[key];\n    };\n    this.set = function(key, value) {\n      this.attributes[key] = value;\n    };\n    this.clear = function(key) {\n      if (typeof key == \"string\" && typeof this.attributes[key] != \"undefined\") {\n        delete this.attributes[key];\n      } else {\n        this.attributes = {};\n      }\n    };\n    this.details = {\n      \"new\": session.new,\n      \"sessionId\": session.sessionId,\n      \"userId\": session.user.userId,\n      \"accessToken\": session.user.accessToken || null,\n      \"attributes\": session.attributes,\n      \"application\": session.application\n    };\n    // persist all the session attributes across requests\n    // the Alexa API doesn't think session variables should persist for the entire\n    // duration of the session, but I do\n    this.attributes = session.attributes || {};\n    this.sessionId = session.sessionId;\n  } else {\n    this.isNew = this.get = this.set = this.clear = function() {\n      throw \"NO_SESSION\";\n    };\n    this.details = {};\n    this.attributes = {};\n    this.sessionId = null;\n  }\n  this.getAttributes = function() {\n    // deep clone attributes so direct updates to objects are not set in the\n    // session unless `.set` is called explicitly\n    return JSON.parse(JSON.stringify(this.attributes));\n  };\n};\n\nalexa.apps = {};\n\nalexa.app = function(name) {\n  if (!(this instanceof alexa.app)) {\n    throw new Error(\"Function must be called with the new keyword\");\n  }\n\n  var self = this;\n  this.name = name;\n  this.messages = {\n    // when an intent was passed in that the application was not configured to handle\n    \"NO_INTENT_FOUND\": \"Sorry, the application didn't know what to do with that intent\",\n    // when an AudioPlayer event was passed in that the application was not configured to handle\n    \"NO_AUDIO_PLAYER_EVENT_HANDLER_FOUND\": \"Sorry, the application didn't know what to do with that AudioPlayer event\",\n    // when the app was used with 'open' or 'launch' but no launch handler was defined\n    \"NO_LAUNCH_FUNCTION\": \"Try telling the application what to do instead of opening it\",\n    // when a request type was not recognized\n    \"INVALID_REQUEST_TYPE\": \"Error: not a valid request\",\n    // when a request and response don't contain session object\n    // https://developer.amazon.com/public/solutions/alexa/alexa-skills-kit/docs/alexa-skills-kit-interface-reference#request-body-parameters\n    \"NO_SESSION\": \"This request doesn't support session attributes\",\n    // if some other exception happens\n    \"GENERIC_ERROR\": \"Sorry, the application encountered an error\"\n  };\n\n  // persist session variables from every request into every response\n  this.persistentSession = true;\n\n  // use a minimal set of utterances or the full cartesian product\n  this.exhaustiveUtterances = false;\n\n  // a catch-all error handler do nothing by default\n  this.error = null;\n\n  // pre/post hooks to be run on every request\n  this.pre = function( /*request, response, type*/ ) {};\n  this.post = function( /*request, response, type*/ ) {};\n\n  // a mapping of keywords to arrays of possible values, for expansion of sample utterances\n  this.dictionary = {};\n  this.intents = {};\n  this.intent = function(intentName, schema, func) {\n    if (typeof schema == \"function\") {\n      func = schema;\n      schema = null;\n    }\n    self.intents[intentName] = {\n      \"name\": intentName,\n      \"function\": func\n    };\n    if (schema) {\n      self.intents[intentName].schema = schema;\n    }\n  };\n  this.audioPlayerEventHandlers = {};\n  this.audioPlayer = function(eventName, func) {\n    self.audioPlayerEventHandlers[eventName] = {\n      \"name\": eventName,\n      \"function\": func\n    };\n  };\n  this.playbackControllerEventHandlers = {};\n  this.playbackController = function(eventName, func) {\n    self.playbackControllerEventHandlers[eventName] = {\n      \"name\": eventName,\n      \"function\": func\n    };\n  };\n  this.launchFunc = null;\n  this.launch = function(func) {\n    self.launchFunc = func;\n  };\n  this.sessionEndedFunc = null;\n  this.sessionEnded = function(func) {\n    self.sessionEndedFunc = func;\n  };\n  this.request = function(request_json) {\n    var request = new alexa.request(request_json);\n    var response = new alexa.response(request.getSession());\n    var postExecuted = false;\n    var requestType = request.type();\n    var promiseChain = Promise.resolve();\n\n    // attach Promise resolve/reject functions to the response object\n    response.send = function(exception) {\n      response.prepare();\n      var postPromise = Promise.resolve();\n      if (typeof self.post == \"function\" && !postExecuted) {\n        postExecuted = true;\n        postPromise = Promise.resolve(self.post(request, response, requestType, exception));\n      }\n      return postPromise.then(function() {\n        if (!response.resolved) {\n          response.resolved = true;\n        }\n        return response.response;\n      });\n    };\n    response.fail = function(msg, exception) {\n      response.prepare();\n      var postPromise = Promise.resolve();\n      if (typeof self.post == \"function\" && !postExecuted) {\n        postExecuted = true;\n        postPromise = Promise.resolve(self.post(request, response, requestType, exception));\n      }\n      return postPromise.then(function() {\n        if (!response.resolved) {\n          response.resolved = true;\n          throw msg;\n        }\n        // propagate successful response if it's already been resolved\n        return response.response;\n      });\n    };\n\n    return promiseChain.then(function () {\n      // Call to `.pre` can also throw, so we wrap it in a promise here to\n      // propagate errors to the error handler\n      var prePromise = Promise.resolve();\n      if (typeof self.pre == \"function\") {\n        prePromise = Promise.resolve(self.pre(request, response, requestType));\n      }\n      return prePromise;\n    }).then(function () {\n      if (!response.resolved) {\n        if (\"IntentRequest\" === requestType) {\n          var intent = request_json.request.intent.name;\n          if (typeof self.intents[intent] != \"undefined\" && typeof self.intents[intent][\"function\"] == \"function\") {\n            return Promise.resolve(self.intents[intent][\"function\"](request, response));\n          } else {\n            throw \"NO_INTENT_FOUND\";\n          }\n        } else if (\"LaunchRequest\" === requestType) {\n          if (typeof self.launchFunc == \"function\") {\n            return Promise.resolve(self.launchFunc(request, response));\n          } else {\n            throw \"NO_LAUNCH_FUNCTION\";\n          }\n        } else if (\"SessionEndedRequest\" === requestType) {\n          if (typeof self.sessionEndedFunc == \"function\") {\n            return Promise.resolve(self.sessionEndedFunc(request, response));\n          }\n        } else if (request.isAudioPlayer()) {\n          var event = requestType.slice(12);\n          var eventHandlerObject = self.audioPlayerEventHandlers[event];\n          if (typeof eventHandlerObject != \"undefined\" && typeof eventHandlerObject[\"function\"] == \"function\") {\n            return Promise.resolve(eventHandlerObject[\"function\"](request, response));\n          }\n        } else if (request.isPlaybackController()) {\n          var playbackControllerEvent = requestType.slice(19);\n          var playbackEventHandlerObject = self.playbackControllerEventHandlers[playbackControllerEvent];\n          if (typeof playbackEventHandlerObject != \"undefined\" && typeof playbackEventHandlerObject[\"function\"] == \"function\") {\n            return Promise.resolve(playbackEventHandlerObject[\"function\"](request, response));\n          }\n        } else {\n          throw \"INVALID_REQUEST_TYPE\";\n        }\n      }\n    })\n    .then(function () {\n      return response.send();\n    })\n    .catch(function(e) {\n      if (typeof self.error == \"function\") {\n        // Default behavior of any error handler is to send a response\n        return Promise.resolve(self.error(e, request, response)).then(function() {\n            if (!response.resolved) {\n                response.resolved = true;\n                return response.send();\n            }\n            // propagate successful response if it's already been resolved\n            return response.response;\n        });\n      } else if (typeof e == \"string\" && self.messages[e]) {\n        if (!request.isAudioPlayer()) {\n          response.say(self.messages[e]);\n          return response.send(e);\n        } else {\n          return response.fail(self.messages[e]);\n        }\n      }\n      if (!response.resolved) {\n        if (e.message) {\n          return response.fail(\"Unhandled exception: \" + e.message + \".\", e);\n        } else if (typeof e == \"string\") {\n          return response.fail(\"Unhandled exception: \" + e + \".\", e);\n        } else {\n          return response.fail(\"Unhandled exception.\", e);\n        }\n      }\n      throw e;\n    });\n  };\n\n  // extract the schema and generate a schema JSON object\n  this.schema = function() {\n    var schema = {\n        \"intents\": []\n      },\n      intentName, intent, key;\n    for (intentName in self.intents) {\n      intent = self.intents[intentName];\n      var intentSchema = {\n        \"intent\": intent.name\n      };\n      if (intent.schema && intent.schema.slots && Object.keys(intent.schema.slots).length > 0) {\n        intentSchema[\"slots\"] = [];\n        for (key in intent.schema.slots) {\n          intentSchema.slots.push({\n            \"name\": key,\n            \"type\": intent.schema.slots[key]\n          });\n        }\n      }\n      schema.intents.push(intentSchema);\n    }\n    return JSON.stringify(schema, null, 3);\n  };\n\n  // generate a list of sample utterances\n  this.utterances = function() {\n    var intentName,\n      intent,\n      out = \"\";\n    for (intentName in self.intents) {\n      intent = self.intents[intentName];\n      if (intent.schema && intent.schema.utterances) {\n        intent.schema.utterances.forEach(function(sample) {\n          var list = AlexaUtterances(sample,\n            intent.schema.slots,\n            self.dictionary,\n            self.exhaustiveUtterances);\n          list.forEach(function(utterance) {\n            out += intent.name + \" \" + (utterance.replace(/\\s+/g, \" \")).trim() + \"\\n\";\n          });\n        });\n      }\n    }\n    return out;\n  };\n\n  // a built-in handler for AWS Lambda\n  this.handler = function(event, context, callback) {\n    self.request(event)\n      .then(function(response) {\n        callback(null, response);\n      })\n      .catch(function(response) {\n        callback(response);\n      });\n  };\n\n  // for backwards compatibility\n  this.lambda = function() {\n    return self.handler;\n  };\n\n  // attach Alexa endpoint to an express router\n  //\n  // @param object options.expressApp the express instance to attach to\n  // @param router options.router router instance to attach to the express app\n  // @param string options.endpoint the path to attach the router to (e.g., passing 'mine' attaches to '/mine')\n  // @param bool options.checkCert when true, applies Alexa certificate checking (default true)\n  // @param bool options.debug when true, sets up the route to handle GET requests (default false)\n  // @param function options.preRequest function to execute before every POST\n  // @param function options.postRequest function to execute after every POST\n  // @throws Error when router or expressApp options are not specified\n  // @returns this\n  this.express = function(options) {\n    if (!options.expressApp && !options.router) {\n      throw new Error(\"You must specify an express app or an express router to attach to.\");\n    }\n\n    var defaultOptions = { endpoint: \"/\" + self.name, checkCert: true, debug: false };\n\n    options = defaults(options, defaultOptions);\n\n    // In ExpressJS, user specifies their paths without the '/' prefix\n    var deprecated = options.expressApp && options.router;\n    var endpoint = deprecated ? '/' : normalizeApiPath(options.endpoint);\n    var target = deprecated ? options.router : (options.expressApp || options.router);\n\n    if (deprecated) {\n      options.expressApp.use(normalizeApiPath(options.endpoint), options.router);\n      console.warn(\"Usage deprecated: Both 'expressApp' and 'router' are specified.\\nMore details on https://github.com/alexa-js/alexa-app/blob/master/UPGRADING.md\");\n    }\n\n    if (options.debug) {\n      target.get(endpoint, function(req, res) {\n        if (typeof req.query['schema'] != \"undefined\") {\n          res.set('Content-Type', 'text/plain').send(self.schema());\n        } else if (typeof req.query['utterances'] != \"undefined\") {\n          res.set('Content-Type', 'text/plain').send(self.utterances());\n        } else {\n          res.render(\"test\", {\n            \"app\": self,\n            \"schema\": self.schema(),\n            \"utterances\": self.utterances()\n          });\n        }\n      });\n    }\n\n    if (options.checkCert) {\n      target.use(endpoint, verifier);\n    } else {\n      target.use(endpoint, bodyParser.json());\n    }\n\n    // exposes POST /<endpoint> route\n    target.post(endpoint, function(req, res) {\n      var json = req.body,\n        response_json;\n      // preRequest and postRequest may return altered request JSON, or undefined, or a Promise\n      Promise.resolve(typeof options.preRequest == \"function\" ? options.preRequest(json, req, res) : json)\n        .then(function(json_new) {\n          if (json_new) {\n            json = json_new;\n          }\n          return json;\n        })\n        .then(self.request)\n        .then(function(app_response_json) {\n          response_json = app_response_json;\n          return Promise.resolve(typeof options.postRequest == \"function\" ? options.postRequest(app_response_json, req, res) : app_response_json);\n        })\n        .then(function(response_json_new) {\n          response_json = response_json_new || response_json;\n          res.json(response_json).send();\n        })\n        .catch(function(err) {\n          console.error(err);\n          res.status(500).send(\"Server Error\");\n        });\n    });\n\n  };\n\n  // add the app to the global list of named apps\n  if (name) {\n    alexa.apps[name] = self;\n  }\n\n  return this;\n};\n\nmodule.exports = alexa;\n","/home/travis/build/npmtest/node-npmtest-alexa-app/node_modules/alexa-app/lib/to-ssml.js":"/**\n Copyright 2015 Rick Wargo. All Rights Reserved.\n\n Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with the License. A copy of the License is located at\n\n http://aws.amazon.com/apache2.0/\n\n or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.\n */\n\n\"use strict\";\n\n// Util functions for generating valid SSML from plain text\n// ========================================================\n\nvar ssml = {\n  fromStr: function(str, current_ssml) {\n    // remove any <speak> tags from the input string, if they exist. There can only be one set of <speak> tags.\n    str = str || \"\";\n    str = str.replace(/<speak>/gi, \" \").replace(/<\\/speak>/gi, \" \").trim();\n\n    // and remove them from the concatenated string, if exists\n    current_ssml = current_ssml || \"\";\n    current_ssml = current_ssml.replace(/<speak>/gi, \" \").replace(/<\\/speak>/gi, \" \").trim();\n\n    //TODO: Need a library with how to easily construct these statements with appropriate spacing, etc.\n    //TODO: make sure all attribute values are surrounded by \"...\"\n    var ssml_str = \"<speak>\" + current_ssml + (current_ssml === \"\" ? \"\" : \" \") + str + \"</speak>\";\n\n    return ssml_str.replace(/  +/, \" \");\n  },\n  cleanse: function(str) {\n    // <p> is left in place to support intended HTML output\n    return str.replace(/<\\/?(speak|break|phoneme|audio|say-as|s\\b|w\\b)[^>]*>/gi, \" \")\n      .replace(/\\s*\\n\\s*/g, \"\\n\")\n      .replace(/  +/g, \" \")\n      .replace(/ ([.,!?;:])/g, \"$1\")\n      .trim();\n  }\n};\n\nmodule.change_code = 1;\nmodule.exports = ssml;\n","/home/travis/build/npmtest/node-npmtest-alexa-app/node_modules/alexa-app/lib/normalize-api-path.js":"\"use strict\";\n\nvar path = require('path');\n\nmodule.exports = function normalizeApiPath(apiPath) {\n  return path.posix.normalize(path.posix.join('/', apiPath));\n};\n","/home/travis/build/npmtest/node-npmtest-alexa-app/node_modules/alexa-app/dangerfile.js":"import { danger, warn } from \"danger\"\n\n// did you forget to update changelog?\nconst hasChangelog = danger.git.modified_files.includes(\"CHANGELOG.md\");\nif (! hasChangelog) {\n  warn(\"Did you forget to update CHANGELOG.md?\");\n}\n"}